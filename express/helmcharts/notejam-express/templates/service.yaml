kind: Service
apiVersion: v1
metadata:
  name: {{ .Values.nodeName }}
  namespace: {{ .Values.metadata.namespace }}
  {{- if eq $.Values.proxy.provider "ambassador" }}
  annotations:
    # Ambassador annotations to expose the service via LoadBalancer    
    getambassador.io/config: |       
      ---
      apiVersion: ambassador/v2
      kind: Mapping
      name: {{ .Values.nodeName }}_api_p2p_mapping
      prefix: /
      host: {{ .Values.nodeName }}.{{ .Values.proxy.external_url_suffix }}
      service: {{ .Values.nodeName }}.{{ .Values.metadata.namespace }}:{{ .Values.expressapp.nodePorts.port }}
      timeout_ms: 20000
      tls: false
  {{ end }}
  labels:
    run: {{ .Values.nodeName }}
    app.kubernetes.io/name: {{ .Values.nodeName }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }} 
spec:
  # Kubernetes service type
  type: {{ .Values.expressapp.serviceType }}
  selector:
    app: {{ .Values.nodeName }}
  # Ports that are exposed by the service
  ports:
  - port: {{ .Values.expressapp.nodePorts.port }}
    targetPort: {{ .Values.expressapp.nodePorts.targetPort }}
    protocol: TCP
    name: {{ .Values.expressapp.nodePorts.name }}
